{"version":3,"sources":["webpack:///./node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack:///./node_modules/micromark-core-commonmark/lib/character-escape.js","webpack:///./node_modules/micromark-core-commonmark/lib/line-ending.js","webpack:///./node_modules/micromark-core-commonmark/lib/code-indented.js","webpack:///./node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack:///./node_modules/micromark-core-commonmark/lib/character-reference.js","webpack:///./node_modules/micromark-core-commonmark/lib/attention.js","webpack:///./node_modules/micromark-core-commonmark/lib/definition.js","webpack:///./node_modules/micromark-core-commonmark/lib/blank-line.js","webpack:///./node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack:///./node_modules/micromark-core-commonmark/lib/html-flow.js","webpack:///./node_modules/micromark-core-commonmark/lib/content.js","webpack:///./node_modules/micromark-core-commonmark/lib/list.js","webpack:///./node_modules/micromark-core-commonmark/lib/code-text.js","webpack:///./node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack:///./node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack:///./node_modules/micromark-core-commonmark/lib/html-text.js","webpack:///./node_modules/micromark-core-commonmark/lib/autolink.js","webpack:///./node_modules/micromark-core-commonmark/lib/label-end.js","webpack:///./node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack:///./node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack:///./node_modules/micromark-core-commonmark/lib/block-quote.js"],"names":["codeFenced","name","tokenize","tokenizeCodeFenced","concrete","effects","ok","nok","self","this","closingFenceConstruct","tokenizeClosingFence","partial","nonLazyLine","tokenizeNonLazyLine","tail","events","length","initialPrefix","type","sliceSerialize","marker","sizeOpen","start","code","enter","sequenceOpen","consume","exit","infoOpen","openAfter","contentType","info","infoAfter","meta","interrupt","contentStart","after","attempt","contentContinue","lineStart","parser","lazy","now","line","size","closingSequenceStart","constructs","disable","null","includes","undefined","closingSequence","closingSequenceEnd","characterEscape","tokenizeCharacterEscape","open","lineEnding","tokenizeLineEnding","codeIndented","tokenizeCodeIndented","indentedContent","tokenizeIndentedContent","afterStartPrefix","afterPrefix","content","hardBreakEscape","tokenizeHardBreakEscape","characterReference","tokenizeCharacterReference","max","test","numeric","value","token","attention","tokenizeAttention","resolveAll","resolveAllAttention","context","group","text","openingSequence","use","nextEvents","offset","index","_close","_open","charCodeAt","end","Object","assign","movePoint","insideSpan","slice","attentionMarkers","previous","before","sequence","close","Boolean","point","column","_bufferIndex","definition","tokenizeDefinition","titleConstruct","tokenizeTitle","identifier","call","labelAfter","defined","push","blankLine","tokenizeBlankLine","afterWhitespace","labelStartLink","tokenizeLabelStartLink","htmlFlow","tokenizeHtmlFlow","resolveTo","resolveToHtmlFlow","nextBlankConstruct","tokenizeNextBlank","splice","kind","startTag","buffer","declarationStart","tagCloseStart","continuationDeclarationInside","String","fromCharCode","tagName","commentOpenInside","cdataOpenInside","continuation","toLowerCase","basicSelfClosing","completeAttributeNameBefore","completeClosingTagAfter","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCharacterDataInside","continuationAtLineEnding","check","htmlContinueStart","done","htmlLineEnd","continuationRawEndTag","tokenizeContent","resolve","resolveContent","continuationConstruct","tokenizeContinuation","data","contentEnd","next","startLookahead","prefixed","flow","list","tokenizeListStart","tokenizeListContinuation","tokenizeListEnd","listItemPrefixWhitespaceConstruct","tokenizeListItemPrefixWhitespace","indentConstruct","tokenizeIndent","initialSize","containerState","_container","atMarker","inside","onBlank","endOfPrefix","otherPrefix","initialBlankLine","_closeFlow","notBlank","furtherBlankLines","notInCurrentItem","codeText","tokenizeCodeText","resolveCodeText","tailExitIndex","headEnterIndex","gap","headingAtx","tokenizeHeadingAtx","resolveHeadingAtx","fenceOpenInside","headingBreak","setextUnderline","tokenizeSetextUnderline","resolveToSetextUnderline","heading","paragraph","htmlText","tokenizeHtmlText","returnState","declarationOpen","instruction","tagOpen","commentOpen","cdataOpen","declaration","commentStart","commentStartDash","comment","commentClose","atLineEnding","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","autolink","tokenizeAutolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","labelEnd","tokenizeLabelEnd","resolveToLabelEnd","resolveAllLabelEnd","resourceConstruct","tokenizeResource","fullReferenceConstruct","tokenizeFullReference","collapsedReferenceConstruct","tokenizeCollapsedReference","media","_inactive","_balanced","label","labelStart","balanced","afterLabelEnd","destinationAfter","between","afterLabel","labelStartImage","tokenizeLabelStartImage","thematicBreak","tokenizeThematicBreak","atBreak","blockQuote","tokenizeBlockQuoteStart","tokenizeBlockQuoteContinuation","state"],"mappings":"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","file":"js/vendors-micromark-core-commonmark.ea20e38a.js","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n\n  const closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  }\n  /** @type {Construct} */\n\n  const nonLazyLine = {\n    tokenize: tokenizeNonLazyLine,\n    partial: true\n  }\n  const tail = this.events[this.events.length - 1]\n  const initialPrefix =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    marker = code\n    return sequenceOpen(code)\n  }\n  /** @type {State} */\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('codeFencedFenceSequence')\n    return sizeOpen < 3\n      ? nok(code)\n      : factorySpace(effects, infoOpen, 'whitespace')(code)\n  }\n  /** @type {State} */\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n  /** @type {State} */\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, infoAfter, 'whitespace')(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return info\n  }\n  /** @type {State} */\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n  /** @type {State} */\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n  /** @type {State} */\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence')\n    return self.interrupt ? ok(code) : contentStart(code)\n  }\n  /** @type {State} */\n\n  function contentStart(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        nonLazyLine,\n        effects.attempt(\n          closingFenceConstruct,\n          after,\n          initialPrefix\n            ? factorySpace(\n                effects,\n                contentStart,\n                'linePrefix',\n                initialPrefix + 1\n              )\n            : contentStart\n        ),\n        after\n      )(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return contentContinue(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return contentStart(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeNonLazyLine(effects, ok, nok) {\n    const self = this\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    let size = 0\n    return factorySpace(\n      effects,\n      closingSequenceStart,\n      'linePrefix',\n      this.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n    /** @type {State} */\n\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence')\n      effects.enter('codeFencedFenceSequence')\n      return closingSequence(code)\n    }\n    /** @type {State} */\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('codeFencedFenceSequence')\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n    /** @type {State} */\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {asciiPunctuation} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n/** @type {Construct} */\n\nconst indentedContent = {\n  tokenize: tokenizeIndentedContent,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeIndented')\n    return factorySpace(effects, afterStartPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterStartPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? afterPrefix(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(indentedContent, afterPrefix, after)(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return content(code)\n  }\n  /** @type {State} */\n\n  function content(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return afterPrefix(code)\n    }\n\n    effects.consume(code)\n    return content\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeIndented')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeIndentedContent(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? start(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('escapeMarker')\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n\n  let max\n  /** @type {(code: Code) => code is number} */\n\n  let test\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n  /** @type {State} */\n\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n  /** @type {State} */\n\n  function value(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === 59 && size) {\n      token = effects.exit('characterReferenceValue')\n\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Point} Point\n */\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n\n  let open\n  /** @type {Token} */\n\n  let group\n  /** @type {Token} */\n\n  let text\n  /** @type {Token} */\n\n  let openingSequence\n  /** @type {Token} */\n\n  let closingSequence\n  /** @type {number} */\n\n  let use\n  /** @type {Event[]} */\n\n  let nextEvents\n  /** @type {number} */\n\n  let offset // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index // Now walk back to find an opener.\n\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open && // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          } // Number of markers to use from the sequence.\n\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = [] // If there are more markers in the opening, add them before.\n\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          } // Opening.\n\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ]) // Between.\n\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          ) // Closing.\n\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ]) // If there are more markers in the closing, add them after.\n\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  } // Remove remaining sequences.\n\n  index = -1\n\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('attentionSequence')\n    marker = code\n    return sequence(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return sequence\n    }\n\n    const token = effects.exit('attentionSequence')\n    const after = classifyCharacter(code)\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\n\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n/** @type {Construct} */\n\nconst titleConstruct = {\n  tokenize: tokenizeTitle,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n\n  let identifier\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('definition')\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Note: blank lines can’t exist in content.\n\n      return factoryWhitespace(\n        effects,\n        factoryDestination(\n          effects,\n          effects.attempt(\n            titleConstruct,\n            factorySpace(effects, after, 'whitespace'),\n            factorySpace(effects, after, 'whitespace')\n          ),\n          nok,\n          'definitionDestination',\n          'definitionDestinationLiteral',\n          'definitionDestinationLiteralMarker',\n          'definitionDestinationRaw',\n          'definitionDestinationString'\n        )\n      )\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      if (!self.parser.defined.includes(identifier)) {\n        self.parser.defined.push(identifier)\n      }\n\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTitle(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, before)(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function before(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factorySpace(effects, after, 'whitespace'),\n        nok,\n        'definitionTitle',\n        'definitionTitleMarker',\n        'definitionTitleString'\n      )(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return factorySpace(effects, afterWhitespace, 'linePrefix')\n  /** @type {State} */\n\n  function afterWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook. */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n/** @type {Construct} */\n\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n/** @type {Construct} */\n\nconst nextBlankConstruct = {\n  tokenize: tokenizeNextBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start // Add the prefix start to the HTML line token.\n\n    events[index + 1][1].start = events[index - 2][1].start // Remove the line prefix.\n\n    events.splice(index - 2, 2)\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n\n  let kind\n  /** @type {boolean} */\n\n  let startTag\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {Code} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationStart\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      kind = 3 // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      startTag = true\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationStart(code) {\n    if (code === 45) {\n      effects.consume(code)\n      kind = 2\n      return commentOpenInside\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      kind = 5\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpenInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      kind = 4\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdataOpenInside(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length\n        ? self.interrupt\n          ? ok\n          : continuation\n        : cdataOpenInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      if (\n        code !== 47 &&\n        startTag &&\n        htmlRawNames.includes(buffer.toLowerCase())\n      ) {\n        kind = 1\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        kind = 6\n\n        if (code === 47) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      kind = 7 // Do not support complete HTML when interrupting\n\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : startTag\n        ? completeAttributeNameBefore(code)\n        : completeClosingTagAfter(code)\n    }\n\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuation\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    return completeAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n\n    return completeAttributeNameBefore(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return completeAttributeValueQuoted\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    marker = null\n    return completeAttributeValueUnquoted(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuoted(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    if (code === marker) {\n      effects.consume(code)\n      return completeAttributeValueQuotedAfter\n    }\n\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return code === null || markdownLineEnding(code)\n      ? continuation(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function continuation(code) {\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n\n    if (code === 60 && kind === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n\n    if (code === 62 && kind === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (code === 63 && kind === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    if (code === 93 && kind === 5) {\n      effects.consume(code)\n      return continuationCharacterDataInside\n    }\n\n    if (markdownLineEnding(code) && (kind === 6 || kind === 7)) {\n      return effects.check(\n        nextBlankConstruct,\n        continuationClose,\n        continuationAtLineEnding\n      )(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      return continuationAtLineEnding(code)\n    }\n\n    effects.consume(code)\n    return continuation\n  }\n  /** @type {State} */\n\n  function continuationAtLineEnding(code) {\n    effects.exit('htmlFlowData')\n    return htmlContinueStart(code)\n  }\n  /** @type {State} */\n\n  function htmlContinueStart(code) {\n    if (code === null) {\n      return done(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        {\n          tokenize: htmlLineEnd,\n          partial: true\n        },\n        htmlContinueStart,\n        done\n      )(code)\n    }\n\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n  /** @type {Tokenizer} */\n\n  function htmlLineEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {State} */\n\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawEndTag(code) {\n    if (code === 62 && htmlRawNames.includes(buffer.toLowerCase())) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationCharacterDataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    } // More dashes.\n\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return done(code)\n    }\n\n    effects.consume(code)\n    return continuationClose\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('htmlFlow')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.exit('htmlFlowData')\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n/** @type {Construct} */\n\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\n\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token} */\n  let previous\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n  /** @type {State} */\n\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return data\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n  /** @type {State} */\n\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    const tail = self.events[self.events.length - 1]\n\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @typedef {Record<string, unknown> & {marker: Code, type: string, size: number}} ListContainerState\n * @typedef {TokenizeContext & {containerState: ListContainerState}} TokenizeContextWithState\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n/** @type {Construct} */\n\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n/** @type {Construct} */\n\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n/** @type {Construct} */\n\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n\n    return nok(code)\n  }\n  /**\n   * @type {State}\n   **/\n\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine, // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n  /** @type {State} */\n\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine // We have a blank line.\n    // Still, try to consume at most the items size.\n\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n  /** @type {State} */\n\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n  /** @type {State} */\n\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true // As we’re closing flow, we’re no longer interrupting.\n\n    self.interrupt = undefined\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n/**\n * @type {Exiter}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n/** @type {Resolver} */\n\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n\n  let index\n  /** @type {number|undefined} */\n\n  let enter // If we start and end with an EOL or a space.\n\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex // And we have data.\n\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  } // Merge adjacent spaces and data.\n\n  index = headEnterIndex - 1\n  tailExitIndex++\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n\n      enter = undefined\n    }\n  }\n\n  return events\n}\n/** @type {Previous} */\n\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n\n  let size\n  /** @type {Token} */\n\n  let token\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return openingSequence(code)\n  }\n  /** @type {State} */\n\n  function openingSequence(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return openingSequence\n    }\n\n    effects.exit('codeTextSequence')\n    return gap(code)\n  }\n  /** @type {State} */\n\n  function gap(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    } // Closing fence?\n    // Could also be data.\n\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return closingSequence(code)\n    } // Tabs don’t work, and virtual spaces don’t make sense.\n\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return gap\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return gap\n    } // Data.\n\n    effects.enter('codeTextData')\n    return data(code)\n  } // In code.\n\n  /** @type {State} */\n\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return gap(code)\n    }\n\n    effects.consume(code)\n    return data\n  } // Closing fence.\n\n  /** @type {State} */\n\n  function closingSequence(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return closingSequence\n    } // Done!\n\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    } // More or less accents: mark as data.\n\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n/** @type {Resolver} */\n\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n\n  let content\n  /** @type {Token} */\n\n  let text // Prefix whitespace, part of the opening.\n\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  } // Suffix whitespace, part of the closing.\n\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      // @ts-expect-error Constants are fine to assign.\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  const self = this\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('atxHeading')\n    effects.enter('atxHeadingSequence')\n    return fenceOpenInside(code)\n  }\n  /** @type {State} */\n\n  function fenceOpenInside(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return fenceOpenInside\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return self.interrupt ? ok(code) : headingBreak(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function headingBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequence(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      return ok(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headingBreak, 'whitespace')(code)\n    }\n\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequence\n    }\n\n    effects.exit('atxHeadingSequence')\n    return headingBreak(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return headingBreak(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n/** @type {Resolver} */\n\nfunction resolveToSetextUnderline(events, context) {\n  let index = events.length\n  /** @type {number|undefined} */\n\n  let content\n  /** @type {number|undefined} */\n\n  let text\n  /** @type {number|undefined} */\n\n  let definition // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    } // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  } // Change the paragraph to setext heading text.\n\n  events[text][1].type = 'setextHeadingText' // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  } // Add the heading exit at the end.\n\n  events.push(['exit', heading, context])\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  /** @type {boolean} */\n\n  let paragraph // Find an opening.\n\n  while (index--) {\n    // Skip enter/exit of line ending, line prefix, and content.\n    // We can now either have a definition or a paragraph.\n    if (\n      self.events[index][1].type !== 'lineEnding' &&\n      self.events[index][1].type !== 'linePrefix' &&\n      self.events[index][1].type !== 'content'\n    ) {\n      paragraph = self.events[index][1].type === 'paragraph'\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      effects.enter('setextHeadingLineSequence')\n      marker = code\n      return closingSequence(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function closingSequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return closingSequence\n    }\n\n    effects.exit('setextHeadingLineSequence')\n    return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code)\n  }\n  /** @type {State} */\n\n  function closingSequenceEnd(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>|undefined} */\n\n  let marker\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {State} */\n\n  let returnState\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpen\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpen\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentStart\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentStart(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentStartDash\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function commentStartDash(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return comment\n  }\n  /** @type {State} */\n\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return end\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function cdataOpen(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length ? cdata : cdataOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return cdata\n  }\n  /** @type {State} */\n\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return declaration\n  }\n  /** @type {State} */\n\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return instruction\n  }\n  /** @type {State} */\n\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagClose(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return tagCloseBetween(code)\n  }\n  /** @type {State} */\n\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpen(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    return tagOpenAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n\n    return tagOpenBetween(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    effects.consume(code)\n    marker = undefined\n    return tagOpenAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return tagOpenAttributeValueQuotedAfter\n    }\n\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 62 || code === 47 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  } // We can’t have blank lines in content, so no need to worry about empty\n  // tokens.\n\n  /** @type {State} */\n\n  function atLineEnding(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(\n      effects,\n      afterPrefix,\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    return asciiAtext(code) ? emailAtext(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function schemeOrEmailAtext(code) {\n    return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)\n      ? schemeInsideOrEmailAtext(code)\n      : emailAtext(code)\n  }\n  /** @type {State} */\n\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return urlInside\n    }\n\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    return emailAtext(code)\n  }\n  /** @type {State} */\n\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      return end(code)\n    }\n\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n  /** @type {State} */\n\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === 62) {\n      // Exit, then change the type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      return end(code)\n    }\n\n    return emailValue(code)\n  }\n  /** @type {State} */\n\n  function emailValue(code) {\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      effects.consume(code)\n      return code === 45 ? emailValue : emailLabel\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.exit('autolink')\n    return ok\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n/** @type {Construct} */\n\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\n\nconst fullReferenceConstruct = {\n  tokenize: tokenizeFullReference\n}\n/** @type {Construct} */\n\nconst collapsedReferenceConstruct = {\n  tokenize: tokenizeCollapsedReference\n}\n/** @type {Resolver} */\n\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  /** @type {Token} */\n\n  let token\n\n  while (++index < events.length) {\n    token = events[index][1]\n\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n\n  return events\n}\n/** @type {Resolver} */\n\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n\n  let token\n  /** @type {number|undefined} */\n\n  let open\n  /** @type {number|undefined} */\n\n  let close\n  /** @type {Event[]} */\n\n  let media // Find an opening.\n\n  while (index--) {\n    token = events[index][1]\n\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      } // Mark other link openings as inactive, as we can’t have links in\n      // links.\n\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ] // Opening marker.\n\n  media = push(media, events.slice(open + 1, open + offset + 3)) // Text open.\n\n  media = push(media, [['enter', text, context]]) // Between.\n\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  ) // Text close, marker close, label close.\n\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ]) // Reference, resource, or so.\n\n  media = push(media, events.slice(close + 1)) // Media close.\n\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n\n  let labelStart\n  /** @type {boolean} */\n\n  let defined // Find an opening.\n\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!labelStart) {\n      return nok(code)\n    } // It’s a balanced bracket, but contains a link.\n\n    if (labelStart._inactive) return balanced(code)\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return afterLabelEnd\n  }\n  /** @type {State} */\n\n  function afterLabelEnd(code) {\n    // Resource: `[asd](fgh)`.\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        ok,\n        defined ? ok : balanced\n      )(code)\n    } // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?\n\n    if (code === 91) {\n      return effects.attempt(\n        fullReferenceConstruct,\n        ok,\n        defined\n          ? effects.attempt(collapsedReferenceConstruct, ok, balanced)\n          : balanced\n      )(code)\n    } // Shortcut reference: `[asd]`?\n\n    return defined ? ok(code) : balanced(code)\n  }\n  /** @type {State} */\n\n  function balanced(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeResource(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return factoryWhitespace(effects, open)\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 41) {\n      return end(code)\n    }\n\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      nok,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      3\n    )(code)\n  }\n  /** @type {State} */\n\n  function destinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, between)(code)\n      : end(code)\n  }\n  /** @type {State} */\n\n  function between(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factoryWhitespace(effects, end),\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeFullReference(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      afterLabel,\n      nok,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function afterLabel(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCollapsedReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('thematicBreak')\n    marker = code\n    return atBreak(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    if (size < 3 || (code !== null && !markdownLineEnding(code))) {\n      return nok(code)\n    }\n\n    effects.exit('thematicBreak')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit('thematicBreakSequence')\n    return atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(blockQuote, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n/** @type {Exiter} */\n\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n"],"sourceRoot":""}